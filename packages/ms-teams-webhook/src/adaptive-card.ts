/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HttpAdaptivecardsIoSchemasAdaptiveCardJson = AdaptiveCard;
/**
 * Gathers input fields, merges with optional data field, and sends an event to the client. Clients process the event by sending an Invoke activity of type adaptiveCard/action to the target Bot. The inputs that are gathered are those on the current card, and in the case of a show card those on any parent cards. See [Universal Action Model](https://docs.microsoft.com/en-us/adaptive-cards/authoring-cards/universal-action-model) documentation for more details.
 */
export type Action = Extendable & {
  /**
   * Must be `Action.Execute`
   */
  type?: "Action.Execute";
  /**
   * The card author-defined verb associated with this action.
   */
  verb?: string;
  /**
   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.
   */
  data?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Controls which inputs are associated with the action.
   */
  associatedInputs?:
    | ("Auto" | "None")
    | {
        [k: string]: unknown;
      };
  title?: unknown;
  iconUrl?: unknown;
  id?: unknown;
  style?: unknown;
  fallback?: unknown;
  tooltip?: unknown;
  isEnabled?: unknown;
  mode?: unknown;
  requires?: unknown;
};
export type Extendable = Extendable1 & {
  /**
   * Label for button or link that represents this action.
   */
  title?: string;
  /**
   * Optional icon to be shown on the action in conjunction with the title. Supports data URI in version 1.2+
   */
  iconUrl?: string;
  /**
   * A unique identifier associated with this Action.
   */
  id?: string;
  /**
   * Controls the style of an Action, which influences how the action is displayed, spoken, etc.
   */
  style?:
    | ("default" | "positive" | "destructive")
    | {
        [k: string]: unknown;
      };
  /**
   * Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.
   */
  fallback?: ImplementationsOfAction | FallbackOption;
  /**
   * Defines text that should be displayed to the end user as they hover the mouse over the action, and read when using narration software.
   */
  tooltip?: string;
  /**
   * Determines whether the action should be enabled.
   */
  isEnabled?: boolean;
  /**
   * Determines whether the action should be displayed as a button or in the overflow menu.
   */
  mode?:
    | ("primary" | "secondary")
    | {
        [k: string]: unknown;
      };
  requires?: unknown;
  [k: string]: unknown;
};
export type ImplementationsOfAction =
  | Action1
  | Action2
  | Action3
  | Action4
  | Action5;
/**
 * Gathers input fields, merges with optional data field, and sends an event to the client. Clients process the event by sending an Invoke activity of type adaptiveCard/action to the target Bot. The inputs that are gathered are those on the current card, and in the case of a show card those on any parent cards. See [Universal Action Model](https://docs.microsoft.com/en-us/adaptive-cards/authoring-cards/universal-action-model) documentation for more details.
 */
export type Action1 = Extendable & {
  /**
   * Must be `Action.Execute`
   */
  type?: "Action.Execute";
  /**
   * The card author-defined verb associated with this action.
   */
  verb?: string;
  /**
   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.
   */
  data?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Controls which inputs are associated with the action.
   */
  associatedInputs?:
    | ("Auto" | "None")
    | {
        [k: string]: unknown;
      };
  title?: unknown;
  iconUrl?: unknown;
  id?: unknown;
  style?: unknown;
  fallback?: unknown;
  tooltip?: unknown;
  isEnabled?: unknown;
  mode?: unknown;
  requires?: unknown;
};
/**
 * When invoked, show the given url either by launching it in an external web browser or showing within an embedded web browser.
 */
export type Action2 = Extendable & {
  /**
   * Must be `Action.OpenUrl`
   */
  type?: "Action.OpenUrl";
  /**
   * The URL to open.
   */
  url: string;
  title?: unknown;
  iconUrl?: unknown;
  id?: unknown;
  style?: unknown;
  fallback?: unknown;
  tooltip?: unknown;
  isEnabled?: unknown;
  mode?: unknown;
  requires?: unknown;
};
/**
 * Defines an AdaptiveCard which is shown to the user when the button or link is clicked.
 */
export type Action3 = Extendable & {
  /**
   * Must be `Action.ShowCard`
   */
  type?: "Action.ShowCard";
  card?: AdaptiveCard1;
  title?: unknown;
  iconUrl?: unknown;
  id?: unknown;
  style?: unknown;
  fallback?: unknown;
  tooltip?: unknown;
  isEnabled?: unknown;
  mode?: unknown;
  requires?: unknown;
};
export type ImplementationsOfElement =
  | ActionSet
  | ColumnSet
  | Container
  | FactSet
  | Image
  | ImageSet
  | Input
  | Input2
  | Input3
  | Input4
  | Input5
  | Input6
  | Media
  | RichTextBlock
  | Table
  | TextBlock;
/**
 * Displays a set of actions.
 */
export type ActionSet = Extendable2 & {
  /**
   * Must be `ActionSet`
   */
  type?: "ActionSet";
  /**
   * The array of `Action` elements to show.
   */
  actions: ImplementationsOfAction[];
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
export type Extendable2 = Extendable3 & {
  /**
   * Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.
   */
  fallback?: ImplementationsOfElement | FallbackOption;
  /**
   * Specifies the height of the element.
   */
  height?:
    | ("auto" | "stretch")
    | {
        [k: string]: unknown;
      };
  /**
   * When `true`, draw a separating line at the top of the element.
   */
  separator?: boolean;
  /**
   * Controls the amount of spacing between this element and the preceding element.
   */
  spacing?:
    | (
        | "default"
        | "none"
        | "small"
        | "medium"
        | "large"
        | "extraLarge"
        | "padding"
      )
    | {
        [k: string]: unknown;
      };
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
  [k: string]: unknown;
};
export type Extendable3 = Extendable1 & {
  /**
   * A unique identifier associated with the item.
   */
  id?: string;
  /**
   * If `false`, this item will be removed from the visual tree.
   */
  isVisible?: boolean;
  requires?: unknown;
  [k: string]: unknown;
};
export type FallbackOption =
  | "drop"
  | {
      [k: string]: unknown;
    };
/**
 * ColumnSet divides a region into Columns, allowing elements to sit side-by-side.
 */
export type ColumnSet = Extendable2 & {
  /**
   * Must be `ColumnSet`
   */
  type?: "ColumnSet";
  /**
   * The array of `Columns` to divide the region into.
   */
  columns?: Column[];
  /**
   * An Action that will be invoked when the `ColumnSet` is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Style hint for `ColumnSet`.
   */
  style?: ContainerStyle | null;
  /**
   * Determines whether the element should bleed through its parent's padding.
   */
  bleed?: boolean;
  /**
   * Specifies the minimum height of the column set in pixels, like `"80px"`.
   */
  minHeight?: string;
  /**
   * Controls the horizontal alignment of the ColumnSet. When not specified, the value of horizontalAlignment is inherited from the parent container. If no parent container has horizontalAlignment set, it defaults to Left.
   */
  horizontalAlignment?: HorizontalAlignment | null;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Defines a container that is part of a ColumnSet.
 */
export type Column = Extendable3 & {
  /**
   * Must be `Column`
   */
  type?: "Column";
  /**
   * The card elements to render inside the `Column`.
   */
  items?: ImplementationsOfElement[];
  /**
   * Specifies the background image. Acceptable formats are PNG, JPEG, and GIF
   */
  backgroundImage?: BackgroundImage | string;
  /**
   * Determines whether the column should bleed through its parent's padding.
   */
  bleed?: boolean;
  /**
   * Describes what to do when an unknown item is encountered or the requires of this or any children can't be met.
   */
  fallback?: Column | FallbackOption;
  /**
   * Specifies the minimum height of the column in pixels, like `"80px"`.
   */
  minHeight?: string;
  /**
   * When `true` content in this column should be presented right to left. When 'false' content in this column should be presented left to right. When unset layout direction will inherit from parent container or column. If unset in all ancestors, the default platform behavior will apply.
   */
  rtl?: boolean | null;
  /**
   * When `true`, draw a separating line between this column and the previous column.
   */
  separator?: boolean;
  /**
   * Controls the amount of spacing between this column and the preceding column.
   */
  spacing?:
    | (
        | "default"
        | "none"
        | "small"
        | "medium"
        | "large"
        | "extraLarge"
        | "padding"
      )
    | {
        [k: string]: unknown;
      };
  /**
   * An Action that will be invoked when the `Column` is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Style hint for `Column`.
   */
  style?: ContainerStyle | null;
  /**
   * Defines how the content should be aligned vertically within the column. When not specified, the value of verticalContentAlignment is inherited from the parent container. If no parent container has verticalContentAlignment set, it defaults to Top.
   */
  verticalContentAlignment?: VerticalContentAlignment | null;
  /**
   * `"auto"`, `"stretch"`, a number representing relative width of the column in the column group, or in version 1.1 and higher, a specific pixel width, like `"50px"`.
   */
  width?: string | number;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Gathers input fields, merges with optional data field, and sends an event to the client. It is up to the client to determine how this data is processed. For example: With BotFramework bots, the client would send an activity through the messaging medium to the bot. The inputs that are gathered are those on the current card, and in the case of a show card those on any parent cards. See https://docs.microsoft.com/en-us/adaptive-cards/authoring-cards/input-validation for more details.
 */
export type Action4 = Extendable & {
  /**
   * Must be `Action.Submit`
   */
  type?: "Action.Submit";
  /**
   * Initial data that input fields will be combined with. These are essentially ‘hidden’ properties.
   */
  data?:
    | string
    | {
        [k: string]: unknown;
      };
  /**
   * Controls which inputs are associated with the submit action.
   */
  associatedInputs?:
    | ("Auto" | "None")
    | {
        [k: string]: unknown;
      };
  title?: unknown;
  iconUrl?: unknown;
  id?: unknown;
  style?: unknown;
  fallback?: unknown;
  tooltip?: unknown;
  isEnabled?: unknown;
  mode?: unknown;
  requires?: unknown;
};
/**
 * An action that toggles the visibility of associated card elements.
 */
export type Action5 = Extendable & {
  /**
   * Must be `Action.ToggleVisibility`
   */
  type?: "Action.ToggleVisibility";
  /**
   * The array of TargetElements. It is not recommended to include Input elements with validation under Action.Toggle due to confusion that can arise from invalid inputs that are not currently visible. See https://docs.microsoft.com/en-us/adaptive-cards/authoring-cards/input-validation for more information.
   */
  targetElements: TargetElement[];
  title?: unknown;
  iconUrl?: unknown;
  id?: unknown;
  style?: unknown;
  fallback?: unknown;
  tooltip?: unknown;
  isEnabled?: unknown;
  mode?: unknown;
  requires?: unknown;
};
/**
 * Represents an entry for Action.ToggleVisibility's targetElements property
 */
export type TargetElement =
  | string
  | {
      /**
       * Must be `TargetElement`
       */
      type?: "TargetElement";
      /**
       * Element ID of element to toggle
       */
      elementId: string;
      /**
       * If `true`, always show target element. If `false`, always hide target element. If not supplied, toggle target element's visibility.
       */
      isVisible?: boolean | null;
    };
export type ContainerStyle =
  | ("default" | "emphasis" | "good" | "attention" | "warning" | "accent")
  | {
      [k: string]: unknown;
    };
export type VerticalContentAlignment =
  | ("top" | "center" | "bottom")
  | {
      [k: string]: unknown;
    };
/**
 * Controls how content is horizontally positioned within its container.
 */
export type HorizontalAlignment =
  | ("left" | "center" | "right")
  | {
      [k: string]: unknown;
    };
/**
 * Containers group items together.
 */
export type Container = Extendable2 & {
  /**
   * Must be `Container`
   */
  type?: "Container";
  /**
   * The card elements to render inside the `Container`.
   */
  items: ImplementationsOfElement[];
  /**
   * An Action that will be invoked when the `Container` is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Style hint for `Container`.
   */
  style?: ContainerStyle | null;
  /**
   * Defines how the content should be aligned vertically within the container. When not specified, the value of verticalContentAlignment is inherited from the parent container. If no parent container has verticalContentAlignment set, it defaults to Top.
   */
  verticalContentAlignment?: VerticalContentAlignment | null;
  /**
   * Determines whether the element should bleed through its parent's padding.
   */
  bleed?: boolean;
  /**
   * Specifies the background image. Acceptable formats are PNG, JPEG, and GIF
   */
  backgroundImage?: BackgroundImage | string;
  /**
   * Specifies the minimum height of the container in pixels, like `"80px"`.
   */
  minHeight?: string;
  /**
   * When `true` content in this container should be presented right to left. When 'false' content in this container should be presented left to right. When unset layout direction will inherit from parent container or column. If unset in all ancestors, the default platform behavior will apply.
   */
  "rtl?"?: boolean | null;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * The FactSet element displays a series of facts (i.e. name/value pairs) in a tabular form.
 */
export type FactSet = Extendable2 & {
  /**
   * Must be `FactSet`
   */
  type?: "FactSet";
  /**
   * The array of `Fact`'s.
   */
  facts: Fact[];
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
export type BlockElementHeight =
  | ("auto" | "stretch")
  | {
      [k: string]: unknown;
    };
/**
 * The ImageSet displays a collection of Images similar to a gallery. Acceptable formats are PNG, JPEG, and GIF
 */
export type ImageSet = Extendable2 & {
  /**
   * Must be `ImageSet`
   */
  type?: "ImageSet";
  /**
   * The array of `Image` elements to show.
   */
  images: Image[];
  /**
   * Controls the approximate size of each image. The physical dimensions will vary per host. Auto and stretch are not supported for ImageSet. The size will default to medium if those values are set.
   */
  imageSize?:
    | ("auto" | "stretch" | "small" | "medium" | "large")
    | {
        [k: string]: unknown;
      };
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Allows a user to input a Choice.
 */
export type Input = Extendable4 & {
  /**
   * Must be `Input.ChoiceSet`
   */
  type?: "Input.ChoiceSet";
  /**
   * `Choice` options.
   */
  choices?: Input1[];
  /**
   * Allow multiple choices to be selected.
   */
  isMultiSelect?: boolean;
  style?: ChoiceInputStyle;
  /**
   * The initial choice (or set of choices) that should be selected. For multi-select, specify a comma-separated string of values.
   */
  value?: string;
  /**
   * Description of the input desired. Only visible when no selection has been made, the `style` is `compact` and `isMultiSelect` is `false`
   */
  placeholder?: string;
  /**
   * If `true`, allow text to wrap. Otherwise, text is clipped.
   */
  wrap?: boolean;
  id?: unknown;
  errorMessage?: unknown;
  isRequired?: unknown;
  label?: unknown;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Style hint for `Input.ChoiceSet`.
 */
export type ChoiceInputStyle =
  | ("compact" | "expanded")
  | {
      [k: string]: unknown;
    };
/**
 * Lets a user choose a date.
 */
export type Input2 = Extendable4 & {
  /**
   * Must be `Input.Date`
   */
  type?: "Input.Date";
  /**
   * Hint of maximum value expressed in YYYY-MM-DD(may be ignored by some clients).
   */
  max?: string;
  /**
   * Hint of minimum value expressed in YYYY-MM-DD(may be ignored by some clients).
   */
  min?: string;
  /**
   * Description of the input desired. Displayed when no selection has been made.
   */
  placeholder?: string;
  /**
   * The initial value for this field expressed in YYYY-MM-DD.
   */
  value?: string;
  id?: unknown;
  errorMessage?: unknown;
  isRequired?: unknown;
  label?: unknown;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Allows a user to enter a number.
 */
export type Input3 = Extendable4 & {
  /**
   * Must be `Input.Number`
   */
  type?: "Input.Number";
  /**
   * Hint of maximum value (may be ignored by some clients).
   */
  max?: number;
  /**
   * Hint of minimum value (may be ignored by some clients).
   */
  min?: number;
  /**
   * Description of the input desired. Displayed when no selection has been made.
   */
  placeholder?: string;
  /**
   * Initial value for this field.
   */
  value?: number;
  id?: unknown;
  errorMessage?: unknown;
  isRequired?: unknown;
  label?: unknown;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Lets a user enter text.
 */
export type Input4 = Extendable4 & {
  /**
   * Must be `Input.Text`
   */
  type?: "Input.Text";
  /**
   * If `true`, allow multiple lines of input.
   */
  isMultiline?: boolean;
  /**
   * Hint of maximum length characters to collect (may be ignored by some clients).
   */
  maxLength?: number;
  /**
   * Description of the input desired. Displayed when no text has been input.
   */
  placeholder?: string;
  /**
   * Regular expression indicating the required format of this text input.
   */
  regex?: string;
  /**
   * Style hint for text input.
   */
  style?:
    | ("text" | "tel" | "url" | "email" | "password")
    | {
        [k: string]: unknown;
      };
  /**
   * The inline action for the input. Typically displayed to the right of the input. It is strongly recommended to provide an icon on the action (which will be displayed instead of the title of the action).
   */
  inlineAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * The initial value for this field.
   */
  value?: string;
  id?: unknown;
  errorMessage?: unknown;
  isRequired?: unknown;
  label?: unknown;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Lets a user select a time.
 */
export type Input5 = Extendable4 & {
  /**
   * Must be `Input.Time`
   */
  type?: "Input.Time";
  /**
   * Hint of maximum value expressed in HH:MM (may be ignored by some clients).
   */
  max?: string;
  /**
   * Hint of minimum value expressed in HH:MM (may be ignored by some clients).
   */
  min?: string;
  /**
   * Description of the input desired. Displayed when no time has been selected.
   */
  placeholder?: string;
  /**
   * The initial value for this field expressed in HH:MM.
   */
  value?: string;
  id?: unknown;
  errorMessage?: unknown;
  isRequired?: unknown;
  label?: unknown;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Lets a user choose between two options.
 */
export type Input6 = Extendable4 & {
  /**
   * Must be `Input.Toggle`
   */
  type?: "Input.Toggle";
  /**
   * Title for the toggle
   */
  title: string;
  /**
   * The initial selected value. If you want the toggle to be initially on, set this to the value of `valueOn`'s value.
   */
  value?: string;
  /**
   * The value when toggle is off
   */
  valueOff?: string;
  /**
   * The value when toggle is on
   */
  valueOn?: string;
  /**
   * If `true`, allow text to wrap. Otherwise, text is clipped.
   */
  wrap?: boolean;
  id?: unknown;
  errorMessage?: unknown;
  isRequired?: unknown;
  label?: unknown;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Displays a media player for audio or video content.
 */
export type Media = Extendable2 & {
  /**
   * Must be `Media`
   */
  type?: "Media";
  /**
   * Array of media sources to attempt to play.
   */
  sources: MediaSource[];
  /**
   * URL of an image to display before playing. Supports data URI in version 1.2+
   */
  poster?: string;
  /**
   * Alternate text describing the audio or video.
   */
  altText?: string;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Defines an array of inlines, allowing for inline text formatting.
 */
export type RichTextBlock = Extendable2 & {
  /**
   * Must be `RichTextBlock`
   */
  type?: "RichTextBlock";
  /**
   * The array of inlines.
   */
  inlines: ImplementationsOfInline[];
  /**
   * Controls the horizontal text alignment. When not specified, the value of horizontalAlignment is inherited from the parent container. If no parent container has horizontalAlignment set, it defaults to Left.
   */
  horizontalAlignment?: HorizontalAlignment | null;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
export type ImplementationsOfInline = TextRun;
/**
 * Defines a single run of formatted text. A TextRun with no properties set can be represented in the json as string containing the text as a shorthand for the json object. These two representations are equivalent.
 */
export type TextRun =
  | string
  | {
      /**
       * Must be `TextRun`
       */
      type?: "TextRun";
      /**
       * Text to display. Markdown is not supported.
       */
      text: string;
      /**
       * Controls the color of the text.
       */
      color?: Colors | null;
      /**
       * The type of font to use
       */
      fontType?: FontType | null;
      /**
       * If `true`, displays the text highlighted.
       */
      highlight?: boolean;
      /**
       * If `true`, displays text slightly toned down to appear less prominent.
       */
      isSubtle?: boolean | null;
      /**
       * If `true`, displays the text using italic font.
       */
      italic?: boolean;
      /**
       * Action to invoke when this text run is clicked. Visually changes the text run into a hyperlink. `Action.ShowCard` is not supported.
       */
      selectAction?: Action1 | Action2 | Action4 | Action5;
      /**
       * Controls size of text.
       */
      size?: FontSize | null;
      /**
       * If `true`, displays the text with strikethrough.
       */
      strikethrough?: boolean;
      /**
       * If `true`, displays the text with an underline.
       */
      underline?: boolean;
      /**
       * Controls the weight of the text.
       */
      weight?: FontWeight | null;
    };
export type Colors =
  | ("default" | "dark" | "light" | "accent" | "good" | "warning" | "attention")
  | {
      [k: string]: unknown;
    };
export type FontType =
  | ("default" | "monospace")
  | {
      [k: string]: unknown;
    };
export type FontSize =
  | ("default" | "small" | "medium" | "large" | "extraLarge")
  | {
      [k: string]: unknown;
    };
export type FontWeight =
  | ("default" | "lighter" | "bolder")
  | {
      [k: string]: unknown;
    };
/**
 * Provides a way to display data in a tabular form.
 */
export type Table = Extendable2 & {
  /**
   * Must be `Table`
   */
  type?: "Table";
  /**
   * Defines the number of columns in the table, their sizes, and more.
   */
  columns?: TableColumnDefinition[];
  /**
   * Defines the rows of the table.
   */
  rows?: TableRow[];
  /**
   * Specifies whether the first row of the table should be treated as a header row, and be announced as such by accessibility software.
   */
  firstRowAsHeader?: boolean;
  /**
   * Specifies whether grid lines should be displayed.
   */
  showGridLines?: boolean;
  /**
   * Defines the style of the grid. This property currently only controls the grid's color.
   */
  gridStyle?: ContainerStyle | null;
  /**
   * Controls how the content of all cells is horizontally aligned by default. When not specified, horizontal alignment is defined on a per-cell basis.
   */
  horizontalCellContentAlignment?: HorizontalAlignment | null;
  /**
   * Controls how the content of all cells is vertically aligned by default. When not specified, vertical alignment is defined on a per-cell basis.
   */
  verticalCellContentAlignment?: VerticalAlignment | null;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
export type VerticalAlignment =
  | ("top" | "center" | "bottom")
  | {
      [k: string]: unknown;
    };
/**
 * Displays text, allowing control over font sizes, weight, and color.
 */
export type TextBlock = Extendable2 & {
  /**
   * Must be `TextBlock`
   */
  type?: "TextBlock";
  /**
   * Text to display. A subset of markdown is supported (https://aka.ms/ACTextFeatures)
   */
  text: string;
  /**
   * Controls the color of `TextBlock` elements.
   */
  color?: Colors | null;
  /**
   * Type of font to use for rendering
   */
  fontType?: FontType | null;
  /**
   * Controls the horizontal text alignment. When not specified, the value of horizontalAlignment is inherited from the parent container. If no parent container has horizontalAlignment set, it defaults to Left.
   */
  horizontalAlignment?: HorizontalAlignment | null;
  /**
   * If `true`, displays text slightly toned down to appear less prominent.
   */
  isSubtle?: boolean | null;
  /**
   * Specifies the maximum number of lines to display.
   */
  maxLines?: number;
  /**
   * Controls size of text.
   */
  size?: FontSize | null;
  /**
   * Controls the weight of `TextBlock` elements.
   */
  weight?: FontWeight | null;
  /**
   * If `true`, allow text to wrap. Otherwise, text is clipped.
   */
  wrap?: boolean;
  /**
   * The style of this TextBlock for accessibility purposes.
   */
  style?: TextBlockStyle | null;
  fallback?: unknown;
  height?: unknown;
  separator?: unknown;
  spacing?: unknown;
  id?: unknown;
  isVisible?: unknown;
  requires?: unknown;
};
/**
 * Controls how a TextBlock behaves.
 */
export type TextBlockStyle =
  | ("default" | "heading")
  | {
      [k: string]: unknown;
    };

/**
 * An Adaptive Card, containing a free-form body of card elements, and an optional set of actions.
 */
export interface AdaptiveCard {
  /**
   * Must be `AdaptiveCard`
   */
  type?: "AdaptiveCard";
  /**
   * Schema version that this card requires. If a client is **lower** than this version, the `fallbackText` will be rendered. NOTE: Version is not required for cards within an `Action.ShowCard`. However, it *is* required for the top-level card.
   */
  version?: string;
  refresh?: Refresh;
  authentication?: Authentication;
  /**
   * The card elements to show in the primary card region.
   */
  body?: ImplementationsOfElement[];
  /**
   * The Actions to show in the card's action bar.
   */
  actions?: ImplementationsOfAction[];
  /**
   * An Action that will be invoked when the card is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Text shown when the client doesn't support the version specified (may contain markdown).
   */
  fallbackText?: string;
  /**
   * Specifies the background image of the card.
   */
  backgroundImage?: BackgroundImage | string;
  /**
   * Specifies the minimum height of the card.
   */
  minHeight?: string;
  /**
   * When `true` content in this Adaptive Card should be presented right to left. When 'false' content in this Adaptive Card should be presented left to right. If unset, the default platform behavior will apply.
   */
  rtl?: boolean | null;
  /**
   * Specifies what should be spoken for this entire card. This is simple text or SSML fragment.
   */
  speak?: string;
  /**
   * The 2-letter ISO-639-1 language used in the card. Used to localize any date/time functions.
   */
  lang?: string;
  /**
   * Defines how the content should be aligned vertically within the container. Only relevant for fixed-height cards, or cards with a `minHeight` specified.
   */
  verticalContentAlignment?:
    | ("top" | "center" | "bottom")
    | {
        [k: string]: unknown;
      };
  /**
   * The Adaptive Card schema.
   */
  $schema?: string;
}
/**
 * Defines how the card can be refreshed by making a request to the target Bot.
 */
export interface Refresh {
  /**
   * Must be `Refresh`
   */
  type?: "Refresh";
  action?: Action;
  /**
   * A list of user Ids informing the client for which users should the refresh action should be run automatically. Some clients will not run the refresh action automatically unless this property is specified. Some clients may ignore this property and always run the refresh action automatically.
   */
  userIds?: string[];
}
export interface Extendable1 {
  /**
   * A series of key/value pairs indicating features that the item requires with corresponding minimum version. When a feature is missing or of insufficient version, fallback is triggered.
   */
  requires?: {
    [k: string]: string;
  };
  [k: string]: unknown;
}
/**
 * The Adaptive Card to show. Inputs in ShowCards will not be submitted if the submit button is located on a parent card. See https://docs.microsoft.com/en-us/adaptive-cards/authoring-cards/input-validation for more details.
 */
export interface AdaptiveCard1 {
  /**
   * Must be `AdaptiveCard`
   */
  type?: "AdaptiveCard";
  /**
   * Schema version that this card requires. If a client is **lower** than this version, the `fallbackText` will be rendered. NOTE: Version is not required for cards within an `Action.ShowCard`. However, it *is* required for the top-level card.
   */
  version?: string;
  refresh?: Refresh;
  authentication?: Authentication;
  /**
   * The card elements to show in the primary card region.
   */
  body?: ImplementationsOfElement[];
  /**
   * The Actions to show in the card's action bar.
   */
  actions?: ImplementationsOfAction[];
  /**
   * An Action that will be invoked when the card is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Text shown when the client doesn't support the version specified (may contain markdown).
   */
  fallbackText?: string;
  /**
   * Specifies the background image of the card.
   */
  backgroundImage?: BackgroundImage | string;
  /**
   * Specifies the minimum height of the card.
   */
  minHeight?: string;
  /**
   * When `true` content in this Adaptive Card should be presented right to left. When 'false' content in this Adaptive Card should be presented left to right. If unset, the default platform behavior will apply.
   */
  rtl?: boolean | null;
  /**
   * Specifies what should be spoken for this entire card. This is simple text or SSML fragment.
   */
  speak?: string;
  /**
   * The 2-letter ISO-639-1 language used in the card. Used to localize any date/time functions.
   */
  lang?: string;
  /**
   * Defines how the content should be aligned vertically within the container. Only relevant for fixed-height cards, or cards with a `minHeight` specified.
   */
  verticalContentAlignment?:
    | ("top" | "center" | "bottom")
    | {
        [k: string]: unknown;
      };
  /**
   * The Adaptive Card schema.
   */
  $schema?: string;
}
/**
 * Defines authentication information to enable on-behalf-of single sign on or just-in-time OAuth.
 */
export interface Authentication {
  /**
   * Must be `Authentication`
   */
  type?: "Authentication";
  /**
   * Text that can be displayed to the end user when prompting them to authenticate.
   */
  text?: string;
  /**
   * The identifier for registered OAuth connection setting information.
   */
  connectionName?: string;
  tokenExchangeResource?: TokenExchangeResource;
  /**
   * Buttons that should be displayed to the user when prompting for authentication. The array MUST contain one button of type "signin". Other button types are not currently supported.
   */
  buttons?: AuthCardButton[];
}
/**
 * Provides information required to enable on-behalf-of single sign-on user authentication.
 */
export interface TokenExchangeResource {
  /**
   * Must be `TokenExchangeResource`
   */
  type?: "TokenExchangeResource";
  /**
   * The unique identified of this token exchange instance.
   */
  id: string;
  /**
   * An application ID or resource identifier with which to exchange a token on behalf of. This property is identity provider- and application-specific.
   */
  uri: string;
  /**
   * An identifier for the identity provider with which to attempt a token exchange.
   */
  providerId: string;
}
/**
 * Defines a button as displayed when prompting a user to authenticate. This maps to the cardAction type defined by the Bot Framework (https://docs.microsoft.com/dotnet/api/microsoft.bot.schema.cardaction).
 */
export interface AuthCardButton {
  /**
   * The type of the button.
   */
  type: string;
  /**
   * The caption of the button.
   */
  title?: string;
  /**
   * A URL to an image to display alongside the button's caption.
   */
  image?: string;
  /**
   * The value associated with the button. The meaning of value depends on the button's type.
   */
  value: string;
}
/**
 * Specifies a background image. Acceptable formats are PNG, JPEG, and GIF
 */
export interface BackgroundImage {
  /**
   * Must be `BackgroundImage`
   */
  type?: "BackgroundImage";
  /**
   * The URL (or data url) of the image. Acceptable formats are PNG, JPEG, and GIF
   */
  url: string;
  /**
   * Describes how the image should fill the area.
   */
  fillMode?:
    | ("cover" | "repeatHorizontally" | "repeatVertically" | "repeat")
    | {
        [k: string]: unknown;
      };
  /**
   * Describes how the image should be aligned if it must be cropped or if using repeat fill mode.
   */
  horizontalAlignment?:
    | ("left" | "center" | "right")
    | {
        [k: string]: unknown;
      };
  /**
   * Describes how the image should be aligned if it must be cropped or if using repeat fill mode.
   */
  verticalAlignment?:
    | ("top" | "center" | "bottom")
    | {
        [k: string]: unknown;
      };
}
/**
 * Describes a Fact in a FactSet as a key/value pair.
 */
export interface Fact {
  /**
   * Must be `Fact`
   */
  type?: "Fact";
  /**
   * The title of the fact.
   */
  title: string;
  /**
   * The value of the fact.
   */
  value: string;
}
/**
 * Displays an image. Acceptable formats are PNG, JPEG, and GIF
 */
export interface Image {
  /**
   * Must be `Image`
   */
  type?: "Image";
  /**
   * The URL to the image. Supports data URI in version 1.2+
   */
  url: string;
  /**
   * Alternate text describing the image.
   */
  altText?: string;
  /**
   * Applies a background to a transparent image. This property will respect the image style.
   */
  backgroundColor?: string;
  /**
   * The desired height of the image. If specified as a pixel value, ending in 'px', E.g., 50px, the image will distort to fit that exact height. This overrides the `size` property.
   */
  height?: string | BlockElementHeight;
  /**
   * Controls how this element is horizontally positioned within its parent. When not specified, the value of horizontalAlignment is inherited from the parent container. If no parent container has horizontalAlignment set, it defaults to Left.
   */
  horizontalAlignment?: HorizontalAlignment | null;
  /**
   * An Action that will be invoked when the `Image` is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Controls the approximate size of the image. The physical dimensions will vary per host.
   */
  size?:
    | ("auto" | "stretch" | "small" | "medium" | "large")
    | {
        [k: string]: unknown;
      };
  /**
   * Controls how this `Image` is displayed.
   */
  style?:
    | ("default" | "person")
    | {
        [k: string]: unknown;
      };
  /**
   * The desired on-screen width of the image, ending in 'px'. E.g., 50px. This overrides the `size` property.
   */
  width?: string;
  /**
   * Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.
   */
  fallback?: ImplementationsOfElement | FallbackOption;
  /**
   * When `true`, draw a separating line at the top of the element.
   */
  separator?: boolean;
  /**
   * Controls the amount of spacing between this element and the preceding element.
   */
  spacing?:
    | (
        | "default"
        | "none"
        | "small"
        | "medium"
        | "large"
        | "extraLarge"
        | "padding"
      )
    | {
        [k: string]: unknown;
      };
  /**
   * A unique identifier associated with the item.
   */
  id?: string;
  /**
   * If `false`, this item will be removed from the visual tree.
   */
  isVisible?: boolean;
  /**
   * A series of key/value pairs indicating features that the item requires with corresponding minimum version. When a feature is missing or of insufficient version, fallback is triggered.
   */
  requires?: {
    [k: string]: string;
  };
}
/**
 * Base input class
 */
export interface Extendable4 {
  /**
   * Unique identifier for the value. Used to identify collected input when the Submit action is performed.
   */
  id: string;
  /**
   * Error message to display when entered input is invalid
   */
  errorMessage?: string;
  /**
   * Whether or not this input is required
   */
  isRequired?: boolean;
  /**
   * Label for this input
   */
  label?: string;
  /**
   * Describes what to do when an unknown element is encountered or the requires of this or any children can't be met.
   */
  fallback?: ImplementationsOfElement | FallbackOption;
  /**
   * Specifies the height of the element.
   */
  height?:
    | ("auto" | "stretch")
    | {
        [k: string]: unknown;
      };
  /**
   * When `true`, draw a separating line at the top of the element.
   */
  separator?: boolean;
  /**
   * Controls the amount of spacing between this element and the preceding element.
   */
  spacing?:
    | (
        | "default"
        | "none"
        | "small"
        | "medium"
        | "large"
        | "extraLarge"
        | "padding"
      )
    | {
        [k: string]: unknown;
      };
  /**
   * If `false`, this item will be removed from the visual tree.
   */
  isVisible?: boolean;
  /**
   * A series of key/value pairs indicating features that the item requires with corresponding minimum version. When a feature is missing or of insufficient version, fallback is triggered.
   */
  requires?: {
    [k: string]: string;
  };
  [k: string]: unknown;
}
/**
 * Describes a choice for use in a ChoiceSet.
 */
export interface Input1 {
  /**
   * Must be `Input.Choice`
   */
  type?: "Input.Choice";
  /**
   * Text to display.
   */
  title: string;
  /**
   * The raw value for the choice. **NOTE:** do not use a `,` in the value, since a `ChoiceSet` with `isMultiSelect` set to `true` returns a comma-delimited string of choice values.
   */
  value: string;
}
/**
 * Defines a source for a Media element
 */
export interface MediaSource {
  /**
   * Must be `MediaSource`
   */
  type?: "MediaSource";
  /**
   * Mime type of associated media (e.g. `"video/mp4"`).
   */
  mimeType: string;
  /**
   * URL to media. Supports data URI in version 1.2+
   */
  url: string;
}
/**
 * Defines the characteristics of a column in a Table element.
 */
export interface TableColumnDefinition {
  /**
   * Must be `TableColumnDefinition`
   */
  type?: "TableColumnDefinition";
  /**
   * Specifies the width of the column. If expressed as a number, width represents the weight a the column relative to the other columns in the table. If expressed as a string, width must by in the format "<number>px" (for instance, "50px") and represents an explicit number of pixels.
   */
  width?: string | number;
  /**
   * Controls how the content of all cells in the column is horizontally aligned by default. When specified, this value overrides the setting at the table level. When not specified, horizontal alignment is defined at the table, row or cell level.
   */
  horizontalCellContentAlignment?: HorizontalAlignment | null;
  /**
   * Controls how the content of all cells in the column is vertically aligned by default. When specified, this value overrides the setting at the table level. When not specified, vertical alignment is defined at the table, row or cell level.
   */
  verticalCellContentAlignment?: VerticalAlignment | null;
}
/**
 * Represents a row of cells within a Table element.
 */
export interface TableRow {
  /**
   * Must be `TableRow`
   */
  type?: "TableRow";
  /**
   * The cells in this row. If a row contains more cells than there are columns defined on the Table element, the extra cells are ignored.
   */
  cells?: TableCell[];
  /**
   * Defines the style of the entire row.
   */
  style?: ContainerStyle | null;
  /**
   * Controls how the content of all cells in the row is horizontally aligned by default. When specified, this value overrides both the setting at the table and columns level. When not specified, horizontal alignment is defined at the table, column or cell level.
   */
  horizontalCellContentAlignment?: HorizontalAlignment | null;
  /**
   * Controls how the content of all cells in the column is vertically aligned by default. When specified, this value overrides the setting at the table and column level. When not specified, vertical alignment is defined either at the table, column or cell level.
   */
  verticalCellContentAlignment?: VerticalAlignment | null;
}
/**
 * Represents a cell within a row of a Table element.
 */
export interface TableCell {
  /**
   * Must be `TableCell`
   */
  type?: "TableCell";
  /**
   * The card elements to render inside the `TableCell`.
   */
  items: ImplementationsOfElement[];
  /**
   * An Action that will be invoked when the `TableCell` is tapped or selected. `Action.ShowCard` is not supported.
   */
  selectAction?: Action1 | Action2 | Action4 | Action5;
  /**
   * Style hint for `TableCell`.
   */
  style?: ContainerStyle | null;
  /**
   * Defines how the content should be aligned vertically within the container. When not specified, the value of verticalContentAlignment is inherited from the parent container. If no parent container has verticalContentAlignment set, it defaults to Top.
   */
  verticalContentAlignment?: VerticalContentAlignment | null;
  /**
   * Determines whether the element should bleed through its parent's padding.
   */
  bleed?: boolean;
  /**
   * Specifies the background image. Acceptable formats are PNG, JPEG, and GIF
   */
  backgroundImage?: BackgroundImage | string;
  /**
   * Specifies the minimum height of the container in pixels, like `"80px"`.
   */
  minHeight?: string;
  /**
   * When `true` content in this container should be presented right to left. When 'false' content in this container should be presented left to right. When unset layout direction will inherit from parent container or column. If unset in all ancestors, the default platform behavior will apply.
   */
  "rtl?"?: boolean | null;
}
